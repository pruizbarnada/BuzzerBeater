# -*- coding: utf-8 -*-
"""Automatically generated by Colaboratory.

Original file is located at
-
"""
###LOAD LIBRARIES

import requests
import xml.etree.ElementTree as ET
from dateutil import parser
import pandas as pd
from google.colab import files
import openpyxl
from tzlocal import get_localzone  # for getting the local timezone
from pandas.core.arrays.datetimes import tzinfo
from datetime import datetime
import pytz

###DEFINE FUNCTIONS

def calendar(user, password, teamid, season):
  base_url = "http://bbapi.buzzerbeater.com/"
  params_autent = {
      "login": user,
      "code": password
  }

  params_analyse = {"teamid":teamid,
                    "season":season
                    }
  session = requests.Session()
  response = session.get(base_url, params=params_autent)
  schedule = session.get(base_url + 'schedule.aspx', params =  params_analyse)

  return schedule
    

def games_played(xml_sched):
  games_in_season = []
  dates = []
  game_type = []
  current_datetime = datetime.now(get_localzone())

  for child in xml_sched.findall("./schedule/match"):
    if child.attrib.get('type') != "unknown":
      games_in_season += [child.attrib.get('id')]
      dates += [child.attrib.get('start')]
      game_type += [child.attrib.get('type')]

  dates = [parser.parse(x) for x in dates]
  games_dates = list(zip(games_in_season, dates, game_type))
  sorted_data = sorted(games_dates, key=lambda x: x[1], reverse = True)
  played_matches = [i for i in sorted_data if i[1] < current_datetime]

  return played_matches


def find_lineup(xml_root, team):

  pg_s = sg_s = sf_s = pf_s = c_s = pg_b = sg_b = sf_b = pf_b = c_b = None

  for child in xml_root.findall(f"./match/{team}/boxscore/player"):
    name = child.find("firstName").text + " " + child.find("lastName").text
    starter = child.find("isStarter").text

    for position in ["PG", "SG", "SF", "PF", "C"]:
      minutes = child.find(f"minutes/{position}").text
      globals()['minutes_%s' % position] = int(minutes)

    max_min = max(minutes_PG, minutes_SG, minutes_SF, minutes_PF, minutes_C)
    if starter == "True":
      if max_min == minutes_PG:
        pg_s = name
      elif max_min == minutes_SG:
        sg_s = name
      elif max_min == minutes_SF:
        sf_s = name
      elif max_min == minutes_PF:
        pf_s = name
      else:
        c_s = name

    else:
      if max_min == minutes_PG:
        if pg_b == None:
          pg_b = (name, minutes_PG)
        else:
          if pg_b[1] < minutes_PG:
            pg_b = (name, minutes_PG)
      elif max_min == minutes_SG:
        if sg_b == None:
          sg_b = (name, minutes_SG)
        else:
          if sg_b[1] < minutes_SG:
            sg_b = (name, minutes_SG)
      elif max_min == minutes_SF:
        if sf_b == None:
          sf_b = (name, minutes_SF)
        else:
          if sf_b[1] < minutes_SF:
            sf_b = (name, minutes_SF)
      elif max_min == minutes_PF:
        if pf_b == None:
          pf_b = (name, minutes_PF)
        else:
          if pf_b[1] < minutes_PF:
            pf_b = (name, minutes_PF)
      else:
        if c_b == None:
          c_b = (name, minutes_C)
        else:
          if c_b[1] < minutes_C:
            c_b = (name, minutes_C)


  try:
    pg_b = pg_b[0]
  except:
    print()
  try:
    sg_b = sg_b[0]
  except:
    print()
  try:
    sf_b = sf_b[0]
  except:
    print()
  try:
    pf_b = pf_b[0]
  except:
    print()
  try:
    c_b = c_b[0]
  except:
    print()

  return pg_s, sg_s, sf_s, pf_s, c_s, pg_b, sg_b, sf_b, pf_b, c_b



def analisis_rival(played_matches, user, password, teamid):
  base_url = "http://bbapi.buzzerbeater.com/"
  params_autent = {
      "login": user,
      "code": password
  }
  session = requests.Session()
  response = session.get(base_url, params=params_autent)

  df = pd.DataFrame(columns=["Tipo partido", 'Rival', 'Ataque', 'Defensa', 'Enfoque', 'Ritmo','Dif. esfuerzo', 'Táctica rival', 'Def. rival', 'Preds. enfoque rival', 'Preds. ritmo rival', 'Calis', 'AE','AI', 'DE', 'DI', 'REB', 'MO', 'Resultado', 'OT', 'Titulares','B', 'E', 'A', 'AP', 'P', 'Suplentes', 'B', 'E', 'A', 'AP', 'P'])

  for i, j, k in played_matches:
    boxscore = session.get(base_url + 'boxscore.aspx', params = {'matchid':i})
    xml_box = ET.fromstring(boxscore.content)
    game_type = k

    score = int(xml_box.find("./match/awayTeam/score").text) - int(xml_box.find("./match/homeTeam/score").text)
    effortDelta = int(xml_box.find("./match/effortDelta").text)

    for child in xml_box.findall("./match/awayTeam/score"):
      partials = ([child.attrib.get('partials')])
      partials = partials[0].split(',')
      if len(partials) == 4:
        ot = ""
      else:
        ot = "Sí"


    for child in xml_box.findall("./match/awayTeam"):
      awayTeam = int(child.attrib.get('id'))

    if awayTeam == teamid:
      team = xml_box.find("./match/awayTeam/teamName").text
      rival = xml_box.find("./match/homeTeam/teamName").text
      strategy = xml_box.find("./match/awayTeam/offStrategy").text
      defense = xml_box.find("./match/awayTeam/defStrategy").text
      focus = xml_box.find("./match/awayTeam/gdp/focus").text
      pace = xml_box.find("./match/awayTeam/gdp/pace").text
      rival_strat = xml_box.find("./match/homeTeam/offStrategy").text
      rival_def = xml_box.find("./match/homeTeam/defStrategy").text
      rival_focus = xml_box.find("./match/homeTeam/gdp/focus").text
      rival_paces = xml_box.find("./match/homeTeam/gdp/pace").text
      ae = xml_box.find("./match/awayTeam/ratings/outsideScoring").text
      ai = xml_box.find("./match/awayTeam/ratings/insideScoring").text
      de = xml_box.find("./match/awayTeam/ratings/outsideDefense").text
      di = xml_box.find("./match/awayTeam/ratings/insideDefense").text
      reb = xml_box.find("./match/awayTeam/ratings/rebounding").text
      mo = xml_box.find("./match/awayTeam/ratings/offensiveFlow").text
      effortDelta *= -1
      pg_s, sg_s, sf_s, pf_s, c_s, pg_b, sg_b, sf_b, pf_b, c_b = find_lineup(xml_box, "awayTeam")



    else:
      team = xml_box.find("./match/homeTeam/teamName").text
      rival = xml_box.find("./match/awayTeam/teamName").text
      strategy = xml_box.find("./match/homeTeam/offStrategy").text
      defense = xml_box.find("./match/homeTeam/defStrategy").text
      focus = xml_box.find("./match/homeTeam/gdp/focus").text
      pace = xml_box.find("./match/homeTeam/gdp/pace").text
      rival_strat = xml_box.find("./match/awayTeam/offStrategy").text
      rival_def = xml_box.find("./match/awayTeam/defStrategy").text
      rival_focus = xml_box.find("./match/awayTeam/gdp/focus").text
      rival_paces = xml_box.find("./match/awayTeam/gdp/pace").text
      ae = xml_box.find("./match/homeTeam/ratings/outsideScoring").text
      ai = xml_box.find("./match/homeTeam/ratings/insideScoring").text
      de = xml_box.find("./match/homeTeam/ratings/outsideDefense").text
      di = xml_box.find("./match/homeTeam/ratings/insideDefense").text
      reb = xml_box.find("./match/homeTeam/ratings/rebounding").text
      mo = xml_box.find("./match/homeTeam/ratings/offensiveFlow").text
      pg_s, sg_s, sf_s, pf_s, c_s, pg_b, sg_b, sf_b, pf_b, c_b = find_lineup(xml_box, "homeTeam")
      score *= -1


    new_row = [game_type, rival, strategy, defense, focus, pace, effortDelta, rival_strat, rival_def, rival_focus, rival_paces, "", ae, ai, de, di, reb, mo, str(score), ot, "", pg_s, sg_s, sf_s, pf_s, c_s, "", pg_b, sg_b, sf_b, pf_b, c_b]
    df.loc[len(df)] = new_row

  return df, team

    
def clean_df(df):
  df = df.transpose()
  df = df.replace('N/A','')

  df = df.replace(0,'')
  df = df.replace(-1,'-')
  df = df.replace(-2,'--')
  df = df.replace(1,'+')
  df = df.replace(2,'++')

  df = df.replace("ManToMan",'Indi')
  df = df.replace("23Zone",'2-3')
  df = df.replace("32Zone",'3-2')
  df = df.replace("131Zone",'1-3-1')
  df = df.replace("InsideBoxAndOne",'CInt+1')
  df = df.replace("OutsideBoxAndOne",'CExt+1')

  df = df.replace("Motion",'MOV')
  df = df.replace("LookInside",'MA')
  df = df.replace("RunAndGun",'CyL')
  df = df.replace("Patient",'PAC')
  df = df.replace("Base",'AB')
  df = df.replace("InsideIsolation",'AI')
  df = df.replace("OutsideIsolation",'AE')
  df = df.replace("LowPost",'PB')
  df = df.replace("Push",'MB')

  df = df.replace("Balanced.hit",'Equilibrado')
  df = df.replace("Balanced.miss",'Equilibrado (X)')
  df = df.replace("Inside.hit",'Interior')
  df = df.replace("Inside.miss",'Interior (X)')
  df = df.replace("Outside.hit",'Exterior')
  df = df.replace("outside.hit",'Exterior')
  df = df.replace("Outside.miss",'Exterior (X)')
  df = df.replace("outside.miss",'Exterior (X)')

  df = df.replace("Fast.hit",'Rápida')
  df = df.replace("Fast.miss",'Rápida (X)')
  df = df.replace("Slow.hit",'Lenta')
  df = df.replace("Slow.miss",'Lenta (X)')
  df = df.replace("Normal.hit",'Normal')
  df = df.replace("Normal.miss",'Normal (X)')

  df = df.replace("nt.roundrobin", "Liguilla")
  df = df.replace("nt.friendly", "Amistoso")
  df = df.replace("nt.final", "Final")
  df = df.replace("nt.semifinal", "Semifinal")
  df = df.replace("nt.qualifier", "Clasificatorio Mundial")
  df = df.replace("nt.tournament.roundrobin", "Consolación")
  df = df.replace("nt.tournament.playoffs", "Playoffs Consolación")

  df = df.replace("league.rs", "Liga")
  df = df.replace("friendly", "Amistoso")
  df = df.replace("bbm", "BBM")
  df = df.replace("bbm.playoff", "BBM3 PO")
  df = df.replace("bbb", "B3")
  df = df.replace("bbb.neutral", "B3 PO")
  df = df.replace("cup", "Copa")
  df = df.replace("pl.rsneutral", "LP")
  df = df.replace("pl.semifinalneutral", "LP")
  df = df.replace("pl.finalneutral", "LP")
  df = df.replace("league.rs.tv", "Liga TV")
  df = df.replace("league.relegation", "PO descenso")
  df = df.replace("cup.semi_or_final", "Copa")
  df = df.replace("league.quarterfinal", "PO (Cuartos)")
  df = df.replace("league.semifinal", "PO (Semis)")
  df = df.replace("league.final", "PO (Final)")

  return df




def tacticas(df):
  exteriores = df.transpose()[(df.transpose()['Ataque'] == "Princeton") | (df.transpose()['Ataque'] == "MOV") | (df.transpose()['Ataque'] == "CyL")].transpose()
  interiores = df.transpose()[(df.transpose()['Ataque'] == "MA") | (df.transpose()['Ataque'] == "PB")].transpose()
  neutras = df.transpose()[(df.transpose()['Ataque'] != "MA") & (df.transpose()['Ataque'] != "PB") & (df.transpose()['Ataque'] != "Princeton") & (df.transpose()['Ataque'] != "MOV") & (df.transpose()['Ataque'] != "CyL")].transpose()

  return exteriores, interiores, neutras

def sacar_excel(df, team, ext, inte, neut, temp):

  with pd.ExcelWriter(f'analisis {team} temporada {temp}.xlsx', engine='openpyxl') as writer:
      df.to_excel(writer, sheet_name = team)
      ext.to_excel(writer, sheet_name='Exteriores')
      inte.to_excel(writer, sheet_name='Interiores')
      neut.to_excel(writer, sheet_name='Neutras')

  files.download(f'analisis {team} temporada {temp}.xlsx')


def excel_rivales(user, password, teamid, season):
  schedule = calendar(user, password, teamid, season)
  xml_sched = ET.fromstring(schedule.content)
  played_matches = games_played(xml_sched)
  df, team = analisis_rival(played_matches, user, password, teamid)
  df = clean_df(df)
  exteriores, interiores, neutras = tacticas(df)
  sacar_excel(df, team, exteriores, interiores, neutras, season)



###GENERATE EXCEL

# user = 
# password = 
# teamid = 
# temporada = 

excel_rivales(user, password, teamid, temporada)
