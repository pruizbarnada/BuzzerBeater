# -*- coding: utf-8 -*-
"""BBMinuteTracker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KTH7benW09rAk6cPuAjb7pPBtJeHqtBe
"""

import requests
import xml.etree.ElementTree as ET
from dateutil import parser

## Usuario de BB, contraseña de BM - Uncomment y rellenar
# username = "Usuario"
# security_code = "pass"

# Especificar partido con ID
gameid = 71030

# Solicitar datos de BBAPI
base_url = "http://bbapi.buzzerbeater.com/"
params_autent = {
    "login": username,
    "code": security_code
}

session = requests.Session()
response = session.get(base_url, params=params_autent)
boxscore = session.get(base_url + 'boxscore.aspx', params = {'matchid':gameid})

print(boxscore.text)

# Generar XML type desde string
xml_root = ET.fromstring(boxscore.content)

# xml_root contiene el XML del boxscore complete
# En esta celda, el for loop va por cada jugador del AwayTeam, imprimiendo ID, nombre, si fue titular y minutos por posición

for child in xml_root.findall("./match/awayTeam/boxscore/player"):
  print("Player ID:", child.attrib.get('id'))
  first_name = child.find("firstName").text
  last_name = child.find("lastName").text
  print(first_name, last_name)
  print("Titular:", child.find("isStarter").text)
  for position in ["PG", "SG", "SF", "PF", "C"]:
    minutes = child.find(f"minutes/{position}").text
    print(f"{position}: {minutes}")
  print()

